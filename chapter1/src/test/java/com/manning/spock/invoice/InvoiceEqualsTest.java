// ********RoostGPT********
/*
Test generated by RoostGPT for test h-11 using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824
ROOST_METHOD_HASH=equals_8933ff313a
ROOST_METHOD_SIG_HASH=equals_f4eca31364
Here are the test scenarios for the `equals` method:
**Scenario 1: Equal objects with same name**
Details:
  TestName: sameObjectReference
  Description: Verify that the `equals` method returns true when the object references are the same.
Execution:
  Arrange: Create an instance of the `Invoice` class, e.g., `invoice`.
  Act: Call `invoice.equals(invoice)`.
  Assert: `assertTrue(invoice.equals(invoice))`.
Validation:
  The assertion aims to verify that the `equals` method returns true when the object references are the same, which is a fundamental property of equality.
**Scenario 2: Equal objects with same name**
Details:
  TestName: equalObjectsSameName
  Description: Verify that the `equals` method returns true when the objects have the same name.
Execution:
  Arrange: Create two instances of the `Invoice` class, e.g., `invoice1` and `invoice2`, with the same name.
  Act: Call `invoice1.equals(invoice2)`.
  Assert: `assertTrue(invoice1.equals(invoice2))`.
Validation:
  The assertion aims to verify that the `equals` method returns true when the objects have the same name, which is a key aspect of equality.
**Scenario 3: Not equal objects with different names**
Details:
  TestName: notEqualObjectsDifferentNames
  Description: Verify that the `equals` method returns false when the objects have different names.
Execution:
  Arrange: Create two instances of the `Invoice` class, e.g., `invoice1` and `invoice2`, with different names.
  Act: Call `invoice1.equals(invoice2)`.
  Assert: `assertFalse(invoice1.equals(invoice2))`.
Validation:
  The assertion aims to verify that the `equals` method returns false when the objects have different names, which is a fundamental property of inequality.
**Scenario 4: Null object**
Details:
  TestName: nullObject
  Description: Verify that the `equals` method returns false when the object is null.
Execution:
  Arrange: Create an instance of the `Invoice` class, e.g., `invoice`.
  Act: Call `invoice.equals(null)`.
  Assert: `assertFalse(invoice.equals(null))`.
Validation:
  The assertion aims to verify that the `equals` method returns false when the object is null, which is a fundamental property of equality.
**Scenario 5: Different class**
Details:
  TestName: differentClass
  Description: Verify that the `equals` method returns false when the object is of a different class.
Execution:
  Arrange: Create an instance of a different class, e.g., `String`.
  Act: Call `invoice.equals(stringInstance)`.
  Assert: `assertFalse(invoice.equals(stringInstance))`.
Validation:
  The assertion aims to verify that the `equals` method returns false when the object is of a different class, which is a fundamental property of equality.
**Scenario 6: Null name**
Details:
  TestName: nullName
  Description: Verify that the `equals` method returns false when one of the objects has a null name.
Execution:
  Arrange: Create two instances of the `Invoice` class, e.g., `invoice1` and `invoice2`, where `invoice1` has a null name.
  Act: Call `invoice1.equals(invoice2)`.
  Assert: `assertFalse(invoice1.equals(invoice2))`.
Validation:
  The assertion aims to verify that the `equals` method returns false when one of the objects has a null name, which is a specific scenario in the implementation.
These test scenarios cover various edge cases and error handling for the `equals` method, ensuring that it behaves correctly in different situations.
*/
// ********RoostGPT********
package com.manning.spock.invoice;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

@Tag("com.manning.spock.invoice")
@Tag("com.manning.spock.invoice.equals")
class InvoiceEqualsTest {

	@Test
	public void sameObjectReference() {
		Invoice invoice = new Invoice("default", "default", "default");
		assertTrue(invoice.equals(invoice));
	}

	@Test
	public void equalObjectsSameName() {
		Invoice invoice1 = new Invoice("default", "default", "default");
		Invoice invoice2 = new Invoice("default", "default", "default");
		assertTrue(invoice1.equals(invoice2));
	}

	@Test
	public void notEqualObjectsDifferentNames() {
		Invoice invoice1 = new Invoice("default", "default", "default");
		Invoice invoice2 = new Invoice("different", "default", "default");
		assertFalse(invoice1.equals(invoice2));
	}

	@Test
	public void nullObject() {
		Invoice invoice = new Invoice("default", "default", "default");
		assertFalse(invoice.equals(null));
	}

	@Test
	public void differentClass() {
		Invoice invoice = new Invoice("default", "default", "default");
		String stringInstance = "string";
		assertFalse(invoice.equals(stringInstance));
	}

	@Test
	public void nullName() {
		Invoice invoice1 = new Invoice(null, "default", "default");
		Invoice invoice2 = new Invoice("default", "default", "default");
		assertFalse(invoice1.equals(invoice2));
	}

}