// ********RoostGPT********
/*
Test generated by RoostGPT for test h-11 using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824
ROOST_METHOD_HASH=hashCode_577102244f
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8
Here are the test scenarios for the `hashCode()` method:
**Scenario 1: Null Name**
Name: `nullNameHashcode`
Description: Verifies that the `hashCode()` method returns a valid hash code when the `name` field is null.
Execution:
 Arrange: Create an object with `name` set to null.
 Act: Call the `hashCode()` method on the object.
 Assert: Assert that the returned hash code is not equal to 0.
Validation: This test ensures that the `hashCode()` method handles null values correctly and returns a valid hash code. This is important to maintain the correctness of hash-based data structures.
**Scenario 2: Non-Null Name**
Name: `nonNullNameHashcode`
Description: Verifies that the `hashCode()` method returns a valid hash code when the `name` field is not null.
Execution:
 Arrange: Create an object with `name` set to a non-null value (e.g., "TestName").
 Act: Call the `hashCode()` method on the object.
 Assert: Assert that the returned hash code is not equal to 0 and is consistent with the hash code of the `name` field.
Validation: This test ensures that the `hashCode()` method correctly incorporates the `name` field's value into the hash code calculation.
**Scenario 3: Equal Objects**
Name: `equalObjectsSameHashcode`
Description: Verifies that two objects with the same `name` field value have the same hash code.
Execution:
 Arrange: Create two objects with the same `name` field value (e.g., "TestName").
 Act: Call the `hashCode()` method on both objects.
 Assert: Assert that the returned hash codes are equal.
Validation: This test ensures that the `hashCode()` method satisfies the contract that equal objects have the same hash code, which is essential for correct behavior in hash-based data structures.
**Scenario 4: Different Objects**
Name: `differentObjectsDifferentHashcode`
Description: Verifies that two objects with different `name` field values have different hash codes.
Execution:
 Arrange: Create two objects with different `name` field values (e.g., "TestName" and "AnotherName").
 Act: Call the `hashCode()` method on both objects.
 Assert: Assert that the returned hash codes are not equal.
Validation: This test ensures that the `hashCode()` method correctly differentiates between objects with distinct `name` field values, which is essential for correct behavior in hash-based data structures.
**Scenario 5: Prime Number Multiplication**
Name: `primeNumberMultiplication`
Description: Verifies that the `hashCode()` method correctly multiplies the hash code by the prime number 31.
Execution:
 Arrange: Create an object with a non-null `name` field value (e.g., "TestName").
 Act: Call the `hashCode()` method on the object.
 Assert: Assert that the returned hash code is equal to the result of multiplying the `name` field's hash code by 31.
Validation: This test ensures that the `hashCode()` method correctly implements the hash code calculation formula, which is essential for maintaining the correctness of hash-based data structures.
*/
// ********RoostGPT********
package com.manning.spock.invoice;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

@Tag("com.manning.spock.invoice")
@Tag("com.manning.spock.invoice.hashCode")
public class InvoiceHashCodeTest {

	@Test
	public void nullNameHashcode() {
		// Arrange
		Invoice invoice = new Invoice();
		invoice.setName(null);
		// Act
		int hashCode = invoice.hashCode();
		// Assert
		assertNotEquals(0, hashCode);
	}

	@Test
	public void nonNullNameHashcode() {
		// Arrange
		Invoice invoice = new Invoice();
		invoice.setName("TestName");
		// Act
		int hashCode = invoice.hashCode();
		// Assert
		assertNotEquals(0, hashCode);
		assertEquals("TestName".hashCode() * 31 + 1, hashCode);
	}

	@Test
	public void equalObjectsSameHashcode() {
		// Arrange
		Invoice invoice1 = new Invoice();
		Invoice invoice2 = new Invoice();
		invoice1.setName("TestName");
		invoice2.setName("TestName");
		// Act
		int hashCode1 = invoice1.hashCode();
		int hashCode2 = invoice2.hashCode();
		// Assert
		assertEquals(hashCode1, hashCode2);
	}

	@Test
	public void differentObjectsDifferentHashcode() {
		// Arrange
		Invoice invoice1 = new Invoice();
		Invoice invoice2 = new Invoice();
		invoice1.setName("TestName");
		invoice2.setName("AnotherName");
		// Act
		int hashCode1 = invoice1.hashCode();
		int hashCode2 = invoice2.hashCode();
		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

	@Test
	public void primeNumberMultiplication() {
		// Arrange
		Invoice invoice = new Invoice();
		invoice.setName("TestName");
		// Act
		int hashCode = invoice.hashCode();
		// Assert
		assertEquals("TestName".hashCode() * 31 + 1, hashCode);
	}

}