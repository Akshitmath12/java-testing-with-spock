// ********RoostGPT********
/*
Test generated by RoostGPT for test h-11 using AI Type DBRX and AI Model meta-llama-3-70b-instruct-041824
ROOST_METHOD_HASH=hasEmail_40e54ab38c
ROOST_METHOD_SIG_HASH=hasEmail_865020cfc3
Here are the test scenarios for the `hasEmail` method:
**Scenario 1: Email Address is Set Successfully**
Details:
  TestName: setEmailAddressSuccessfully
  Description: Verifies that the `email` field is set to the provided email address when the `hasEmail` method is called.
Execution:
  Arrange: Create an instance of the class with an empty `email` field.
  Act: Call the `hasEmail` method with a valid email address as a parameter.
  Assert: Use `assertEquals` to verify that the `email` field is set to the provided email address.
Validation:
  This test ensures that the `hasEmail` method sets the `email` field correctly. This is crucial in the context of application behavior, as it affects the subsequent usage of the `email` field.
**Scenario 2: Email Address is Null**
Details:
  TestName: setEmailAddressNull
  Description: Verifies that the `email` field is set to null when the `hasEmail` method is called with a null parameter.
Execution:
  Arrange: Create an instance of the class with an empty `email` field.
  Act: Call the `hasEmail` method with null as a parameter.
  Assert: Use `assertNull` to verify that the `email` field is set to null.
Validation:
  This test ensures that the `hasEmail` method handles null inputs correctly, which is essential in preventing `NullPointerException`s.
**Scenario 3: Email Address is Empty String**
Details:
  TestName: setEmailAddressEmptyString
  Description: Verifies that the `email` field is set to an empty string when the `hasEmail` method is called with an empty string as a parameter.
Execution:
  Arrange: Create an instance of the class with an empty `email` field.
  Act: Call the `hasEmail` method with an empty string as a parameter.
  Assert: Use `assertEquals` to verify that the `email` field is set to an empty string.
Validation:
  This test ensures that the `hasEmail` method handles empty string inputs correctly, which is important in preventing incorrect email addresses from being set.
**Scenario 4: Email Address is Already Set**
Details:
  TestName: setEmailAddressAlreadySet
  Description: Verifies that the `email` field is updated correctly when the `hasEmail` method is called with a new email address when it's already set.
Execution:
  Arrange: Create an instance of the class with an existing `email` field value.
  Act: Call the `hasEmail` method with a new email address as a parameter.
  Assert: Use `assertEquals` to verify that the `email` field is updated to the new email address.
Validation:
  This test ensures that the `hasEmail` method updates the `email` field correctly, even when it's already set, which is essential in maintaining the correctness of the application's state.
*/
// ********RoostGPT********
package com.manning.spock.invoice;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;

@Tag("com.manning.spock.invoice")
@Tag("com.manning.spock.invoice.hasEmail")
public class CustomerHasEmailTest {

	@Test
	public void setEmailAddressSuccessfully() {
		// Arrange
		Customer customer = new Customer();
		String expectedEmail = "test@example.com";
		// Act
		customer.hasEmail(expectedEmail);
		// Assert
		assertEquals(expectedEmail, customer.getEmail());
	}

	@Test
	public void setEmailAddressNull() {
		// Arrange
		Customer customer = new Customer();
		// Act
		customer.hasEmail(null);
		// Assert
		assertNull(customer.getEmail());
	}

	@Test
	public void setEmailAddressEmptyString() {
		// Arrange
		Customer customer = new Customer();
		String expectedEmail = "";
		// Act
		customer.hasEmail(expectedEmail);
		// Assert
		assertEquals(expectedEmail, customer.getEmail());
	}

	@Test
	public void setEmailAddressAlreadySet() {
		// Arrange
		Customer customer = new Customer();
		String initialEmail = "initial@example.com";
		customer.hasEmail(initialEmail);
		String newEmail = "new@example.com";
		// Act
		customer.hasEmail(newEmail);
		// Assert
		assertEquals(newEmail, customer.getEmail());
	}

}